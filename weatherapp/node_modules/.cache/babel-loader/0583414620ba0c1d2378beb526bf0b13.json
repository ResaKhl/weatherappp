{"ast":null,"code":"var _jsxFileName = \"/home/rk/WebstormProjects/WeatherAPPP/weatherapp/src/WeatherComponents/Hourly.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Chart } from 'chart.js';\n\nfunction Hourly(props) {\n  const reftocanvas = useRef(null);\n  useEffect(() => {\n    const can = reftocanvas.current;\n    console.log(can);\n    const ctx = can.getContext('2d');\n    const data = [];\n    const labels = [];\n    const bgc = [];\n    const bordc = []; // h in props.weatherinfo.hourly.data\n    // props.weatherinfo.hourly.data.temperature\n\n    for (let i = 0; i < 10; i++) {\n      data.push(props.weatherinfo.hourly.data.temperature);\n      labels.push('');\n      bgc.push('rgba(54, 162, 235, 0.2)');\n      bordc.push('rgba(54, 162, 235, 1)');\n    }\n\n    console.log(data, '****koss');\n    const mychart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels,\n        datasets: [{\n          label: '# of Votes',\n          data,\n          backgroundColor: bgc,\n          borderColor: bordc,\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            }\n          }]\n        }\n      }\n    });\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"canvas\", {\n    id: \"myChart\",\n    width: \"400\",\n    height: \"400\",\n    \"aria-label\": \"Hello ARIA World\",\n    ref: reftocanvas,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Hello Fallback World\")));\n}\n\nexport default Hourly;","map":{"version":3,"sources":["/home/rk/WebstormProjects/WeatherAPPP/weatherapp/src/WeatherComponents/Hourly.js"],"names":["React","useState","useEffect","useRef","Chart","Hourly","props","reftocanvas","can","current","console","log","ctx","getContext","data","labels","bgc","bordc","i","push","weatherinfo","hourly","temperature","mychart","type","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","yAxes","ticks","beginAtZero"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,MAApC,QAAiD,OAAjD;AACA,SAAQC,KAAR,QAAoB,UAApB;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAsB;AAClB,QAAMC,WAAW,GAAGJ,MAAM,CAAC,IAAD,CAA1B;AACAD,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMM,GAAG,GAAGD,WAAW,CAACE,OAAxB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,UAAMI,GAAG,GAAGJ,GAAG,CAACK,UAAJ,CAAe,IAAf,CAAZ;AACA,UAAMC,IAAI,GAAG,EAAb;AACA,UAAMC,MAAM,GAAG,EAAf;AACA,UAAMC,GAAG,GAAG,EAAZ;AACA,UAAMC,KAAK,GAAG,EAAd,CAPU,CAQV;AACA;;AACA,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAaA,CAAC,GAAC,EAAf,EAAkBA,CAAC,EAAnB,EAAsB;AAClBJ,MAAAA,IAAI,CAACK,IAAL,CAAUb,KAAK,CAACc,WAAN,CAAkBC,MAAlB,CAAyBP,IAAzB,CAA8BQ,WAAxC;AACAP,MAAAA,MAAM,CAACI,IAAP,CAAY,EAAZ;AACAH,MAAAA,GAAG,CAACG,IAAJ,CAAS,yBAAT;AACAF,MAAAA,KAAK,CAACE,IAAN,CAAW,uBAAX;AACH;;AACDT,IAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ,EAAkB,UAAlB;AAEA,UAAMS,OAAO,GAAG,IAAInB,KAAJ,CAAUQ,GAAV,EAAe;AAC3BY,MAAAA,IAAI,EAAE,KADqB;AAE3BV,MAAAA,IAAI,EAAE;AACFC,QAAAA,MADE;AAEFU,QAAAA,QAAQ,EAAE,CAAC;AACPC,UAAAA,KAAK,EAAE,YADA;AAEPZ,UAAAA,IAFO;AAGPa,UAAAA,eAAe,EAAEX,GAHV;AAIPY,UAAAA,WAAW,EAAEX,KAJN;AAKPY,UAAAA,WAAW,EAAE;AALN,SAAD;AAFR,OAFqB;AAY3BC,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE,CAAC;AACJC,YAAAA,KAAK,EAAE;AACHC,cAAAA,WAAW,EAAE;AADV;AADH,WAAD;AADH;AADH;AAZkB,KAAf,CAAhB;AAsBH,GAxCQ,CAAT;AAyCA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAQ,IAAA,EAAE,EAAC,SAAX;AAAqB,IAAA,KAAK,EAAC,KAA3B;AAAiC,IAAA,MAAM,EAAC,KAAxC;AAA8C,kBAAW,kBAAzD;AAA4E,IAAA,GAAG,EAAE3B,WAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAA9F,CADA,CADJ;AAKH;;AAED,eAAeF,MAAf","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\nimport {Chart} from 'chart.js';\n\nfunction Hourly(props){\n    const reftocanvas = useRef(null);\n    useEffect(()=>{\n        const can = reftocanvas.current;\n        console.log(can)\n        const ctx = can.getContext('2d');\n        const data = [];\n        const labels = [];\n        const bgc = [];\n        const bordc = [];\n        // h in props.weatherinfo.hourly.data\n        // props.weatherinfo.hourly.data.temperature\n        for (let i=0;i<10;i++){\n            data.push(props.weatherinfo.hourly.data.temperature);\n            labels.push('');\n            bgc.push('rgba(54, 162, 235, 0.2)');\n            bordc.push('rgba(54, 162, 235, 1)');\n        }\n        console.log(data, '****koss')\n        \n        const mychart = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels,\n                datasets: [{\n                    label: '# of Votes',\n                    data,\n                    backgroundColor: bgc,\n                    borderColor: bordc,\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    yAxes: [{\n                        ticks: {\n                            beginAtZero: true\n                        }\n                    }]\n                }\n            }\n        });\n    });\n    return(\n        <div>\n        <canvas id=\"myChart\" width=\"400\" height=\"400\" aria-label=\"Hello ARIA World\" ref={reftocanvas}><p>Hello Fallback World</p></canvas>\n        </div>\n    );\n}\n\nexport default Hourly"]},"metadata":{},"sourceType":"module"}