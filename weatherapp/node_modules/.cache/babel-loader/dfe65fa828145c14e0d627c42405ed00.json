{"ast":null,"code":"var _jsxFileName = \"/home/rk/WebstormProjects/WeatherAPPP/weatherapp/src/WeatherComponents/Hourly.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Chart } from 'chart.js';\n\nfunction Hourly(props) {\n  const reftocanvas = useRef(null);\n  useEffect(() => {\n    const can = reftocanvas.current;\n    console.log(can);\n    const ctx = can.getContext('2d');\n    const mychart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange', 'Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n        datasets: [{\n          label: '# of Votes',\n          data: [12, 19, 3, 5, 2, 3, 12, 19, 3, 5, 2, 3],\n          backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)'],\n          borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            }\n          }]\n        }\n      }\n    });\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"canvas\", {\n    id: \"myChart\",\n    width: \"400\",\n    height: \"400\",\n    \"aria-label\": \"Hello ARIA World\",\n    ref: reftocanvas,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Hello Fallback World\")));\n}\n\nexport default Hourly;","map":{"version":3,"sources":["/home/rk/WebstormProjects/WeatherAPPP/weatherapp/src/WeatherComponents/Hourly.js"],"names":["React","useState","useEffect","useRef","Chart","Hourly","props","reftocanvas","can","current","console","log","ctx","getContext","mychart","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","yAxes","ticks","beginAtZero"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,MAApC,QAAiD,OAAjD;AACA,SAAQC,KAAR,QAAoB,UAApB;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAsB;AAClB,QAAMC,WAAW,GAAGJ,MAAM,CAAC,IAAD,CAA1B;AACAD,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMM,GAAG,GAAGD,WAAW,CAACE,OAAxB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,UAAMI,GAAG,GAAGJ,GAAG,CAACK,UAAJ,CAAe,IAAf,CAAZ;AAEA,UAAMC,OAAO,GAAG,IAAIV,KAAJ,CAAUQ,GAAV,EAAe;AAC3BG,MAAAA,IAAI,EAAE,KADqB;AAE3BC,MAAAA,IAAI,EAAE;AACFC,QAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,MAAR,EAAgB,QAAhB,EAA0B,OAA1B,EAAmC,QAAnC,EAA6C,QAA7C,EAAsD,KAAtD,EAA6D,MAA7D,EAAqE,QAArE,EAA+E,OAA/E,EAAwF,QAAxF,EAAkG,QAAlG,CADN;AAEFC,QAAAA,QAAQ,EAAE,CAAC;AACPC,UAAAA,KAAK,EAAE,YADA;AAEPH,UAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,CAFC;AAGPI,UAAAA,eAAe,EAAE,CACb,yBADa,EAEb,yBAFa,EAGb,yBAHa,EAIb,yBAJa,EAKb,0BALa,EAMb,yBANa,CAHV;AAWPC,UAAAA,WAAW,EAAE,CACT,uBADS,EAET,uBAFS,EAGT,uBAHS,EAIT,uBAJS,EAKT,wBALS,EAMT,uBANS,CAXN;AAmBPC,UAAAA,WAAW,EAAE;AAnBN,SAAD;AAFR,OAFqB;AA0B3BC,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE,CAAC;AACJC,YAAAA,KAAK,EAAE;AACHC,cAAAA,WAAW,EAAE;AADV;AADH,WAAD;AADH;AADH;AA1BkB,KAAf,CAAhB;AAoCH,GAzCQ,CAAT;AA0CA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAQ,IAAA,EAAE,EAAC,SAAX;AAAqB,IAAA,KAAK,EAAC,KAA3B;AAAiC,IAAA,MAAM,EAAC,KAAxC;AAA8C,kBAAW,kBAAzD;AAA4E,IAAA,GAAG,EAAEpB,WAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAA9F,CADA,CADJ;AAKH;;AAED,eAAeF,MAAf","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\nimport {Chart} from 'chart.js';\n\nfunction Hourly(props){\n    const reftocanvas = useRef(null);\n    useEffect(()=>{\n        const can = reftocanvas.current;\n        console.log(can)\n        const ctx = can.getContext('2d');\n        \n        const mychart = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange','Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n                datasets: [{\n                    label: '# of Votes',\n                    data: [12, 19, 3, 5, 2, 3, 12, 19, 3, 5, 2, 3],\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(255, 159, 64, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)',\n                        'rgba(255, 159, 64, 1)'\n                    ],\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    yAxes: [{\n                        ticks: {\n                            beginAtZero: true\n                        }\n                    }]\n                }\n            }\n        });\n    });\n    return(\n        <div>\n        <canvas id=\"myChart\" width=\"400\" height=\"400\" aria-label=\"Hello ARIA World\" ref={reftocanvas}><p>Hello Fallback World</p></canvas>\n        </div>\n    );\n}\n\nexport default Hourly"]},"metadata":{},"sourceType":"module"}