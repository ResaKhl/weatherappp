{"ast":null,"code":"import _slicedToArray from \"/home/rk/WebstormProjects/WeatherAPPP/weatherapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/rk/WebstormProjects/WeatherAPPP/weatherapp/src/index.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useFetch } from \"./hooks\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './App';\nimport MyComponent from \"./WeatherComponents/Posts\";\nimport Post from \"./WeatherComponents/singlepost\";\nimport Users from \"./WeatherComponents/Users\";\nimport axios from 'axios';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\nexport default function App() {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        hasError = _useState2[0],\n        setErrors = _useState2[1];\n\n  const _useEffect = // async function fetchData() {\n  //   const res = await fetch(\"'http://jsonplaceholder.typicode.com/users\");\n  //   res.json()\n  //     .then(res => setData(res))\n  //     .catch(err => setErrors(err));\n  // }\n  useEffect(() => {\n    console.log(); // fetchData();\n  }),\n        _useEffect2 = _slicedToArray(_useEffect, 2),\n        data = _useEffect2[0],\n        setData = _useEffect2[1]; // useEffect(async ()=>{\n  //   const res = await axios('http://jsonplaceholder.typicode.com/users');\n  //   setData(data);\n  //   console.log(data, 'gavvvvvvvvvvvvv')\n  //   // fetch('http://jsonplaceholder.typicode.com/users')\n  //   //   .then(res=>res.json())\n  //   //   .then((data)=>{\n  //   //     this.setState({users:data});\n  //   //     console.log('tokhm', data)\n  //   //   })\n  //   //   .catch(console.log);\n  // }, []);\n\n\n  console.log(data, 'loooooooooooooooooo');\n  return React.createElement(Router, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"nav\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, JSON.stringify(data), \"kir\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(Link, {\n    exact: true,\n    to: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Home\")), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/about\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"About\")), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/users\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Users\")), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/posts\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Posts\")))), React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(Route, {\n    path: \"/post/:postid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(Post, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })), React.createElement(Route, {\n    path: \"/posts\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(MyComponent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  })), React.createElement(Route, {\n    path: \"/about\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(About, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  })), React.createElement(Route, {\n    path: \"/users\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(Users, {\n    users: data,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  })), React.createElement(Route, {\n    path: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(Home, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  })))));\n}\n\nfunction About() {\n  return React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"About\");\n}\n\nfunction Posts() {\n  return React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Posts\");\n}","map":{"version":3,"sources":["/home/rk/WebstormProjects/WeatherAPPP/weatherapp/src/index.js"],"names":["React","useEffect","useState","useFetch","ReactDOM","Home","MyComponent","Post","Users","axios","BrowserRouter","Router","Switch","Route","Link","serviceWorker","render","document","getElementById","unregister","App","hasError","setErrors","console","log","data","setData","JSON","stringify","About","Posts"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useFetch } from \"./hooks\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './App';\nimport MyComponent from \"./WeatherComponents/Posts\";\nimport Post from \"./WeatherComponents/singlepost\";\nimport Users from \"./WeatherComponents/Users\";\nimport axios from 'axios';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n  } from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nexport default function App() {\n  const [hasError, setErrors] = useState(false);\n  const [data, setData] = \n  // async function fetchData() {\n  //   const res = await fetch(\"'http://jsonplaceholder.typicode.com/users\");\n  //   res.json()\n  //     .then(res => setData(res))\n  //     .catch(err => setErrors(err));\n  // }\n  useEffect(() => {console.log();\n    // fetchData();\n  });\n\n  // useEffect(async ()=>{\n  //   const res = await axios('http://jsonplaceholder.typicode.com/users');\n  //   setData(data);\n  //   console.log(data, 'gavvvvvvvvvvvvv')\n  //   // fetch('http://jsonplaceholder.typicode.com/users')\n  //   //   .then(res=>res.json())\n  //   //   .then((data)=>{\n  //   //     this.setState({users:data});\n  //   //     console.log('tokhm', data)\n  //   //   })\n  //   //   .catch(console.log);\n  // }, []);\n  console.log(data, 'loooooooooooooooooo');\n    return (\n      <Router>\n        <div>\n          <nav>\n            <table>\n              <span>{JSON.stringify(data)}kir</span>\n              <td>\n                <Link exact to=\"/\">Home</Link>\n              </td>\n              <td>\n                <Link to=\"/about\">About</Link>\n              </td>\n              <td>\n                <Link to=\"/users\">Users</Link>\n              </td>\n              <td>\n                <Link to=\"/posts\">Posts</Link>\n              </td>\n            </table>\n          </nav>\n  \n          {/* A <Switch> looks through its children <Route>s and\n              renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/post/:postid\">\n              <Post />\n            </Route>\n            <Route path=\"/posts\">\n              <MyComponent />\n            </Route>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/users\">\n              <Users users={data}/>\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n  \n  function About() {\n    return <h2>About</h2>;\n  }\n\n  function Posts() {\n    return <h2>Posts</h2>;\n  }\n\n  \n"]},"metadata":{},"sourceType":"module"}